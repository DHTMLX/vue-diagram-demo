import { Id } from "../../ts-common/types";
import { IEventSystem } from "../../ts-common/events";
import { IKeyManager } from "../../ts-common/KeyManager";
import { View } from "../../ts-common/view";
import { DataEvents, Diagram, DiagramEvents, SelectionEvents, IShapeToolbarConfig, ActionDirection } from "../../ts-diagram";
import { IDataItem } from "../../ts-data";
import { HistoryManager } from "./helpers/HistoryManager";
import { SelectionBox } from "./helpers/SelectionBox";
import { CopyManager } from "./helpers/CopyManager";
import { Controls } from "./controls/Controls";
import { Toolbar, View as Views } from "./view";
import { DiagramEditorEvents, IDefaultEditorConfig, IDiagramEditor, IDiagramEditorHandlersMap, IEditorConfig, IMindmapEditorConfig, IOrgEditorConfig } from "./types";
import { Editbar } from "./view/Editbar";
export declare abstract class BaseDiagramEditor extends View implements IDiagramEditor {
    version: string;
    config: IEditorConfig;
    events: IEventSystem<DataEvents | SelectionEvents | DiagramEvents | DiagramEditorEvents, IDiagramEditorHandlersMap>;
    diagram: Diagram;
    history: HistoryManager;
    model: CopyManager;
    view: Views;
    toolbar: Toolbar;
    editbar: Editbar;
    protected _resizer: Controls;
    protected _selectionBox: SelectionBox;
    protected _keyManager: IKeyManager;
    private _touch;
    private _diagramSize;
    constructor(container: string | HTMLElement, config: IEditorConfig);
    paint(): void;
    parse(data: IDataItem[]): void;
    serialize(): IDataItem[];
    zoomIn(step?: number): void;
    zoomOut(step?: number): void;
    import(diagram: Diagram): void;
    destructor(): void;
    protected abstract _initUI(container: any): any;
    protected abstract _initDiagram(): any;
    protected _setHandlers(): void;
    protected _initHotkeys(): void;
    protected _getDefaults(): {};
    protected _removeItem(id: Id): void;
    protected _getToolbarConfig({ type, shapeToolbar, }: IOrgEditorConfig | IMindmapEditorConfig | IDefaultEditorConfig): IShapeToolbarConfig[];
    protected _moveItem(item: IDataItem, step: number, dir: ActionDirection): void;
    protected _removeSelected(): void;
    private _dragStart;
    private _clearTouchTimer;
    private getBlockSelectedCoords;
}
