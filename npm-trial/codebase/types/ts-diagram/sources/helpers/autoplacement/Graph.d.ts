import { LBound, LNodeHash, LNode, LPoint, IGraph, IRoutes } from "./types";
export default class Graph implements IGraph {
    private nodes;
    hash: LNodeHash;
    routes: IRoutes;
    private _root;
    private _deep;
    _bounds: LBound[];
    _tbounds: LBound;
    _width: number;
    private _leaves;
    _symmetry: boolean;
    private _ybounds;
    constructor(parent?: IGraph, root?: LNode, config?: any);
    copy(): Graph;
    collectSubNodes(root: LNode, backet: LNode[]): void;
    getLevelBounds(): LBound[];
    getBounds(i: number, padding: number, wide: boolean): number[];
    addEdge(from: string, to: string): void;
    importNodes(node: LNode[]): void;
    split(filter: any): Graph;
    addNode(node: LNode): void;
    setRoot(): void;
    getNode(id: string): LNode;
    getRoot(): LNode;
    getLevels(): LNode[][];
    clean(): void;
    getNodes(): LNode[];
    getBox(): [LBound, LBound];
    setGlobalBox(): void;
    translate(p: LPoint): void;
    rotate(a: LPoint): void;
    setBox(): void;
    mirror(): void;
    nonLeaves(n: LNode): LNode[];
    toTree(root: any): any;
    root(root: any, config?: any): void;
    private setKids;
    private cleanKids;
    private _detectRoot;
    private _setLevels;
    getIString(): string;
}
